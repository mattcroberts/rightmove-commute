version: 2
jobs:
  install-dependencies:
    docker:
      - image: circleci/node:10
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          command: yarn

      - save_cache:
          paths:
            - node_modules
          key: npm-deps-{{ checksum "./package.json" }}-{{ checksum "./packages/api/package.json" }}
  build:
    docker:
      - image: circleci/node
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "./package.json" }}-{{ checksum "./packages/api/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - npm-deps-
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          working_directory: ~/repo
          command: docker build -t mattcroberts/rightmove-commute:0.1.${CIRCLE_SHA1} -t mattcroberts/rightmove-commute:latest -f ./packages/api/Dockerfile .
      - run:
          command: echo $DOCKER_PASSWORD | docker login -u $DOCKER_LOGIN --password-stdin
      - run:
          working_directory: ~/repo/packages/api
          command: docker push mattcroberts/rightmove-commute
  deploy:
    machine: true
    working_directory: ~/repo
    steps:
      - add_ssh_keys:
          fingerprints:
            - "88:15:7f:4a:1b:1e:12:9c:ab:e7:af:12:bc:d8:25:01"
      - checkout
      - run:
          command: |
            cat > env.sh <<- EOM
              export GOOGLE_API_KEY=${GOOGLE_API_KEY}
              export TAG=0.1.${CIRCLE_SHA1}
              export LOGGLY_CUSTOMER_TOKEN=${LOGGLY_CUSTOMER_TOKEN}
            EOM
      - run:
          command: ssh -o StrictHostKeyChecking=no ${DO_USER}@${DO_HOST} "mkdir -p rightmove-commute" && scp -o StrictHostKeyChecking=no docker-compose.yml env.sh ${DO_USER}@${DO_HOST}:~/rightmove-commute
      - run:
          command: scp -r -o StrictHostKeyChecking=no ./nginx ${DO_USER}@${DO_HOST}:~
      - run:
          command: ssh -o StrictHostKeyChecking=no ${DO_USER}@${DO_HOST} "/bin/bash ./deploy.sh"
workflows:
  version: 2
  test:
    jobs:
      - install-dependencies
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
